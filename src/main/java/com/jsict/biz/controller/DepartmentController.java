package com.jsict.biz.controller;

import com.jsict.biz.dao.DepartmentDao;
import com.jsict.biz.dao.UserDao;
import com.jsict.biz.model.DepartmentQuery;
import com.jsict.biz.model.User;
import com.jsict.biz.service.DepartmentService;
import com.jsict.biz.service.UserService;
import com.jsict.framework.core.controller.AbstractGenericController;
import com.jsict.biz.model.Department;

import com.jsict.framework.core.controller.CSRFTokenManager;
import com.jsict.framework.core.controller.Response;
import com.jsict.framework.core.controller.RestControllerException;
import com.jsict.framework.core.dao.annotation.RepeatData;
import com.jsict.framework.core.security.model.IUser;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.SecurityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import java.util.ArrayList;
import java.util.List;

/**
 * Auto-Generated by UDP Generator
 */
@Controller
@RequestMapping("/dept")
public class DepartmentController extends
        AbstractGenericController<Department, String, Department> {

    @Autowired
    private DepartmentDao departmentDao;
    @Autowired
    private UserDao userDao;

    private static final Logger logger = LoggerFactory.getLogger(DepartmentController.class);

    @Override
    @RequestMapping(value = {"/page"}, method = {RequestMethod.POST}, produces = {"application/json"})
    @ResponseBody
    public Page<Department> page(@ModelAttribute Department department, @PageableDefault Pageable pageable) {
        try {
            return this.generiService.findByPage(department, pageable);
        } catch (Exception var4) {
            logger.error("翻页查询出错", var4);
            throw new RestControllerException("翻页查询出错", var4);
        }
    }

    @Override
    @RequestMapping(value = {"/save"}, method = {RequestMethod.POST}, produces = {"application/json"})
    @ResponseBody
    @RepeatData
    public Response save(@ModelAttribute Department entity, @RequestParam("CSRFToken") String paramToken, HttpServletRequest request) {
        Response response;
        try {
            String validatorInfo = this.validateModel(entity);
            if (StringUtils.isNotBlank(validatorInfo)) {
                response = new Response(ERROR, validatorInfo);
                return response;
            }
            String sessionToken = CSRFTokenManager.getTokenForSession(request.getSession());
            if (paramToken != null && paramToken.equals(sessionToken)) {
                //判断科室名称是否已存在
                Map<String,Object> params = new HashMap<>();
                params.put("delFlag",0);
                params.put("deptName",entity.getDeptName());
                List<Department> list = departmentDao.getObjectListBySqlKey("getListByNameCode",params,Department.class);
                if (list != null &&list.size() > 0){
                  response = new Response(ERROR, "科室名称已存在");
                  return response;
                }
                //判断科室编码是否已存在
                params.remove("deptName");
                params.put("deptCode",entity.getDeptCode());
                List<Department> list2 = departmentDao.getObjectListBySqlKey("getListByNameCode",params,Department.class);
                if (list2 != null &&list2.size() > 0){
                  response = new Response(ERROR, "科室编码已存在");
                  return response;
                }

                entity.setId(null);
                IUser user = (IUser)SecurityUtils.getSubject().getPrincipal();
                if (user != null) {
                    entity.setCreatorId(user.getId());
                }
                entity.setType("1");
                this.generiService.save(entity);
                response = new Response(SUCCESS, entity);
            } else {
                response = new Response(ERROR, "CSRF attack detected");
            }
        } catch (Exception var9) {
            logger.error(var9.getLocalizedMessage(), var9);
            response = new Response(ERROR, var9.getLocalizedMessage(), entity);
        }
        return response;
    }

    @Override
    @RequestMapping(value = {"/update"}, method = {RequestMethod.POST}, produces = {"application/json"})
    @ResponseBody
    @RepeatData
    public Response update(@ModelAttribute Department entity, @RequestParam("CSRFToken") String paramToken, HttpServletRequest request) {
        Response response;
        try {
            String validatorInfo = this.validateModel(entity);
            if (StringUtils.isNotBlank(validatorInfo)) {
                response = new Response(ERROR, validatorInfo);
                return response;
            }
            String sessionToken = CSRFTokenManager.getTokenForSession(request.getSession());
            if (paramToken != null && paramToken.equals(sessionToken)) {
                Department dept = this.generiService.get(entity.getId());
                if (!dept.getDeptName().equals(entity.getDeptName())){
                  //如果科室名称改变，判断科室名称是否已存在
                  Map<String,Object> params = new HashMap<>();
                  params.put("delFlag",0);
                  params.put("deptName",entity.getDeptName());
                  List<Department> list = departmentDao.getObjectListBySqlKey("getListByNameCode",params,Department.class);
                  if (list != null &&list.size() > 0){
                    response = new Response(ERROR, "科室名称已存在");
                    return response;
                  }
                }
                if (!dept.getDeptCode().equals(entity.getDeptCode())){
                  //如果科室编码改变，判断科室编码是否已存在
                  Map<String,Object> params = new HashMap<>();
                  params.put("delFlag",0);
                  params.put("deptCode",entity.getDeptCode());
                  List<Department> list = departmentDao.getObjectListBySqlKey("getListByNameCode",params,Department.class);
                  if (list != null &&list.size() > 0){
                    response = new Response(ERROR, "科室编码已存在");
                    return response;
                  }
                }
                IUser user = (IUser)SecurityUtils.getSubject().getPrincipal();
                if (user != null) {
                    entity.setUpdaterId(user.getId());
                }
                entity.setCreatedDate(dept.getCreatedDate());
                entity.setCreatorId(dept.getCreatorId());
                entity.setType(dept.getType());
                this.generiService.update(entity);
                response = new Response(SUCCESS, entity);
            } else {
                response = new Response(ERROR, "CSRF attack detected");
            }
        } catch (Exception var9) {
            logger.error(var9.getLocalizedMessage(), var9);
            response = new Response(ERROR, var9.getLocalizedMessage(), entity);
        }
        return response;
    }

    @Override
    @RequestMapping(value = {"/delete/{id}"}, method = {RequestMethod.POST}, produces = {"application/json"})
    @ResponseBody
    public Response delete(@PathVariable String id) {
        Response response;
        try {
            Map<String,Object> params = new HashMap<>();
            params.put("delFlag",0);
            params.put("deptId",id);
            List<User> list = userDao.getObjectListBySqlKey("getListByDept",params,User.class);
            if (list != null && list.size() > 0){
              response = new Response(ERROR, "此科室还存在人员，无法删除");
              return response;
            }
            boolean isSuccess = this.generiService.deleteById(id);
            if (isSuccess) {
                response = new Response(SUCCESS);
            } else {
                response = new Response(ERROR, "没有找到对象");
            }
        } catch (Exception var4) {
            logger.error(var4.getLocalizedMessage(), var4);
            response = new Response(ERROR, var4.getLocalizedMessage());
        }
        return response;
    }

    private String validateModel(Object obj) {
        StringBuilder buffer = new StringBuilder(64);
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        Set<ConstraintViolation<Object>> constraintViolations = validator.validate(obj, new Class[0]);
        Iterator iter = constraintViolations.iterator();

        while(iter.hasNext()) {
            String message = ((ConstraintViolation)iter.next()).getMessage();
            buffer.append(message);
        }

        return buffer.toString();
    }

}